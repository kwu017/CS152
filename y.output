Terminals which are not used

   MOD
   L_SQUARE_BRACKET
   R_SQUARE_BRACKET
   GT
   GTE
   LT
   LTE
   EQ
   NEQ
   SEMICOLON
   COLON
   COMMA
   FUNCTION
   BEGIN_PARAMS
   END_PARAMS
   BEGIN_LOCALS
   END_LOCALS
   BEGIN_BODY
   END_BODY
   INTEGER
   ARRAY
   OF
   IF
   THEN
   ENDIF
   ELSE
   WHILE
   DO
   FOREACH
   IN
   BEGINLOOP
   ENDLOOP
   CONTINUE
   READ
   WRITE
   AND
   OR
   NOT
   TRUE
   FALSE
   RETURN
   CHARACTER


Grammar

    0 $accept: input $end

    1 input: /* empty */
    2      | input line

    3 line: exp ASSIGN END

    4 exp: NUMBER
    5    | exp ADD exp
    6    | exp SUB exp
    7    | exp MULT exp
    8    | exp DIV exp
    9    | SUB exp
   10    | L_PAREN exp R_PAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
SUB (258) 6 9
ADD (259) 5
MULT (260) 7
DIV (261) 8
MOD (262)
END (263) 3
L_PAREN (264) 10
R_PAREN (265) 10
L_SQUARE_BRACKET (266)
R_SQUARE_BRACKET (267)
GT (268)
GTE (269)
LT (270)
LTE (271)
EQ (272)
NEQ (273)
SEMICOLON (274)
COLON (275)
COMMA (276)
ASSIGN (277) 3
FUNCTION (278)
BEGIN_PARAMS (279)
END_PARAMS (280)
BEGIN_LOCALS (281)
END_LOCALS (282)
BEGIN_BODY (283)
END_BODY (284)
INTEGER (285)
ARRAY (286)
OF (287)
IF (288)
THEN (289)
ENDIF (290)
ELSE (291)
WHILE (292)
DO (293)
FOREACH (294)
IN (295)
BEGINLOOP (296)
ENDLOOP (297)
CONTINUE (298)
READ (299)
WRITE (300)
AND (301)
OR (302)
NOT (303)
TRUE (304)
FALSE (305)
RETURN (306)
NUMBER (307) 4
CHARACTER (308)
UMINUS (309)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
input (56)
    on left: 1 2, on right: 0 2
line (57)
    on left: 3, on right: 2
exp (58)
    on left: 4 5 6 7 8 9 10, on right: 3 5 6 7 8 9 10


state 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


state 1

    0 $accept: input . $end
    2 input: input . line

    $end     shift, and go to state 2
    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    line  go to state 6
    exp   go to state 7


state 2

    0 $accept: input $end .

    $default  accept


state 3

    9 exp: SUB . exp

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 8


state 4

   10 exp: L_PAREN . exp R_PAREN

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 9


state 5

    4 exp: NUMBER .

    $default  reduce using rule 4 (exp)


state 6

    2 input: input line .

    $default  reduce using rule 2 (input)


state 7

    3 line: exp . ASSIGN END
    5 exp: exp . ADD exp
    6    | exp . SUB exp
    7    | exp . MULT exp
    8    | exp . DIV exp

    SUB     shift, and go to state 10
    ADD     shift, and go to state 11
    MULT    shift, and go to state 12
    DIV     shift, and go to state 13
    ASSIGN  shift, and go to state 14


state 8

    5 exp: exp . ADD exp
    6    | exp . SUB exp
    7    | exp . MULT exp
    8    | exp . DIV exp
    9    | SUB exp .

    $default  reduce using rule 9 (exp)


state 9

    5 exp: exp . ADD exp
    6    | exp . SUB exp
    7    | exp . MULT exp
    8    | exp . DIV exp
   10    | L_PAREN exp . R_PAREN

    SUB      shift, and go to state 10
    ADD      shift, and go to state 11
    MULT     shift, and go to state 12
    DIV      shift, and go to state 13
    R_PAREN  shift, and go to state 15


state 10

    6 exp: exp SUB . exp

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 16


state 11

    5 exp: exp ADD . exp

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 17


state 12

    7 exp: exp MULT . exp

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 18


state 13

    8 exp: exp DIV . exp

    SUB      shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NUMBER   shift, and go to state 5

    exp  go to state 19


state 14

    3 line: exp ASSIGN . END

    END  shift, and go to state 20


state 15

   10 exp: L_PAREN exp R_PAREN .

    $default  reduce using rule 10 (exp)


state 16

    5 exp: exp . ADD exp
    6    | exp . SUB exp
    6    | exp SUB exp .
    7    | exp . MULT exp
    8    | exp . DIV exp

    MULT  shift, and go to state 12
    DIV   shift, and go to state 13

    $default  reduce using rule 6 (exp)


state 17

    5 exp: exp . ADD exp
    5    | exp ADD exp .
    6    | exp . SUB exp
    7    | exp . MULT exp
    8    | exp . DIV exp

    MULT  shift, and go to state 12
    DIV   shift, and go to state 13

    $default  reduce using rule 5 (exp)


state 18

    5 exp: exp . ADD exp
    6    | exp . SUB exp
    7    | exp . MULT exp
    7    | exp MULT exp .
    8    | exp . DIV exp

    $default  reduce using rule 7 (exp)


state 19

    5 exp: exp . ADD exp
    6    | exp . SUB exp
    7    | exp . MULT exp
    8    | exp . DIV exp
    8    | exp DIV exp .

    $default  reduce using rule 8 (exp)


state 20

    3 line: exp ASSIGN END .

    $default  reduce using rule 3 (line)
